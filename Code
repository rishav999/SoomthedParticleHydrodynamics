Main Code (Flow past block):
%Computational Project - Flow past block
% Initialize stuff
clear all
close all
 
b_size = 0.2; %Size of block to flow past
b_pos = [1.25, 0.45, .1, .1]; %Position of block's lower left corner
n = 10; %Size of particle grid is (n+1) x (n+1)
xbegin = 0.1; %Starting x value
ybegin = 0; %Starting y value
[X,Y] = meshgrid(xbegin:1/n:(xbegin+1),ybegin:1/n:(ybegin+1)); %Creat meshgrid for plotting
N = size(meshgrid(0:1/n:1,0:1/n:1)); %Size of initial grid
Nx = N(2);
Ny = N(1);
n = Nx*Ny; %New size of array
X = reshape(X,[n 1]); %Make X and Y into column vectors
Y = reshape(Y,[n 1]);
 
poss = zeros(n,2); %initialize position of every particle
poss(:,1) = X;
poss(:,2) = Y;
 
F_tot = zeros(n,2); %initialize acceleration matrix
density = zeros(n,1);
pressure = zeros(n,1);
 
velocity = [2 .* ones(n,1), zeros(n,1)]; %initialize velocity matrix with flow
 
% Constants/integration limits
pm = 1; %Particle mass (changes later)
 
x = 20;%Average number of particles in kernel
A = 1*1;%Area (m^2)
h = sqrt((A*x)/(n*pi));%Kernel size (m)
 
dt = 0.005; %integration time step size (may need to be adjusted)
k = 30; %Gas stiffness constant
 
g = -9.8;   %gravity constant m/s^2
md0 = 988;  %density (roughly that of water for now) kg/m^3
surfaceTension = 0.0728; %surface tension value recommended by Johansson N/m
surfaceLimit = sqrt(md0/x);
cr = 0.001; %Strength of interaction with boarders scaling factor
viscosityConstant = 3.5; %Recommended by Johansson (Pa*s)
runTime = 3;
 
 
% Video recording
mov = VideoWriter('Simulation_Block_test','Uncompressed AVI');
mov.FrameRate = round(1/dt);
open(mov);
 
%Write particles
figure
plot(poss(:,1),poss(:,2),'b.') %plot the initial position of the particles
hold on
rectangle('Position', b_pos, 'EdgeColor', 'r'); %plot block
hold off
axis tight
set(gca,'nextplot','replacechildren');
xlim([0 4])
ylim([-1.5 2.5])
 
% Adjust mass after desierd density
[pm] = update_mass(n,poss,pm,md0,h);
 
% Time loop
for t = 0:dt:runTime
    
    % Density and pressure
    
    [density, pressure] = update_pressure(n,poss,pm,md0,h,k);
    
    % Forces
    for i = 1:n
        fp = 0; %Pressure force
        fv = 0; %Viscosity force
       
        fg = 0; %no gravity for this case (top down view)
        
        for j = 1:n
            r = poss(i,:) - poss(j,:);
            if((r*r')< h^2)
                if r ~= 0
                    %Calculate pressure force
                    fp = fp +(((pressure(i)/(density(i)^2)))+((pressure(j)/(density(j)^2))))*pm*Equations(r,h,2);
                    %Calculate viscosity force
                    u = velocity(j,:) - velocity(i,:); %Find difference in velocities
                    fv = fv + u*(pm/density(j))*Equations(r,h,3);
                end
            end
        end
       
        
        fp = -density(i)*fp; %Correct pressure force based on ith particle's density
        fv = (viscosityConstant)*fv; %Correct viscocisty force based on viscosity constant
        
        fa = 0; %other force if needed
        F_tot(i,:) = (fp + fv + [0 fg] + fa); %Sum of forces
    end
    % Time integration
    for i = 1:n
        a = F_tot(i,:)/density(i); %Calculate acceleration (F/m)
        % Use Modified Verlet method for simple integration
        velocity(i,:) = velocity(i,:) + a*dt;
        poss(i,:) = poss(i,:) + velocity(i,:)*dt + 0.5*a*dt^2;
        %end
        
        % Boundary conditions (different for each scenerio)
        [poss, velocity] = boundary_block(poss, velocity, cr,i,dt);
        
        
    end
    
    % Save movie
    currFrame = getframe;
    writeVideo(mov,currFrame);
    
    plot(poss(:,1),poss(:,2),'b.')
    xlim([0 4])
    ylim([-1.5 2.5])
    hold on
    rectangle('Position', b_pos, 'EdgeColor', 'r'); %plot block
    hold off
    xlim([0 4])
    ylim([-1.5 2.5])
end
close(mov)


Main code (Bucket): 
(Similar to above but with different initial and boundary conditions)
%Computational Project - Dropping Sheet of Water into Bucket
%Initialize Stuff
clear all
close all
botx = [1.5, 2.5]; %For plotting bucket
boty = [-1, -1];
leftx = [1.5, 1.5];
lefty = [-1, 0];
rightx = [2.5, 2.5];
tr = [2.5, 0];
b_size = 0.2; %Size of block to flow past
b_pos = [1.5, -1, 1, 1]; %Position of block's lower left corner
n = 20; %Size of particle grid is n+1
xbegin = 1.25; %Starting x value
ybegin = 0.5; %Starting y value
[X,Y] = meshgrid(xbegin:1/n:(xbegin+1),ybegin:1/n:(ybegin+1)); %Creat meshgrid for plotting
N = size(meshgrid(0:1/n:1,0:1/n:1)); %Size of initial grid
Nx = N(2);
Ny = N(1);
n = Nx*Ny; %New size of array
X = reshape(X,[n 1]); %Make X and Y into column vectors
Y = reshape(Y,[n 1]);
 
poss = zeros(n,2); %initialize position of every particle
poss(:,1) = X;
poss(:,2) = Y;
 
velocity = zeros(n,2); %initilize velocity matrix
F_tot = zeros(n,2); %initialize acceleration matrix
density = zeros(n,1);
pressure = zeros(n,1);
 
 
%Constants/integration limits
pm = 1; %initial mass (updated later)
 
x = 30; %Average number of particles in kernel
A = 1*1;%Area (m^2)
h = sqrt((A*x)/(n*pi)); %Kernel size (m).
 
dt = 0.005; %integration time step size (may need to be adjusted)
k = 30; %Gas stiffness constant
 
g = -9.8;   %gravity constant m/s^2
md0 = 988;  %density (roughly that of water for now) kg/m^3
surfaceTension = 0.0728; %surface tension value recommended by Johansson N/m
surfaceLimit = sqrt(md0/x);
cr = 0.005; %Interaction strength scaling factor at boarder conditions
viscosityConstant = 3.5; %Recommended by Johansson (Pa*s)
runTime = 3.5; %Time of integration
 
 
% Save the plot as a movie
mov = VideoWriter('Simulation_Bucket2','Uncompressed AVI');
mov.FrameRate = round(1/dt);
open(mov);
 
%Write particles
figure
plot(poss(:,1),poss(:,2),'b.') %plot the initial position of the particles
hold on
plot(botx, boty, 'r');
plot(leftx, lefty, 'r');
plot(rightx, lefty, 'r'); %Plot bucket
hold off
axis tight
set(gca,'nextplot','replacechildren');
xlim([0 4])
ylim([-1.5 2.5])
 
% Adjust mass after desierd density
[pm] = update_mass(n,poss,pm,md0,h);
 
% Time integration
for t = 0:dt:runTime
    
    % Density and pressure
    [density, pressure] = update_pressure(n,poss,pm,md0,h,k);
    
    % Forces for each particle
    for i = 1:n
        fp = 0;%Pressure force
        fv = 0;%Viscosity force
        
        fg = g*density(i);%Gravity
        
        for j = 1:n
            r = poss(i,:) - poss(j,:);
            if((r*r')< h^2)
                if r ~= 0
                    %Calculate pressure force
                    fp = fp +(((pressure(i)/(density(i)^2)))+((pressure(j)/(density(j)^2))))*pm*Equations(r,h,2);
                    %Calculate viscosity force
                    u = velocity(j,:) - velocity(i,:); %Find difference in velocities
                    fv = fv + u*(pm/density(j))*Equations(r,h,3);
                end
            end
        end
 
        fp = -density(i)*fp; %Correct pressure force based on ith particle's density
        fv = (viscosityConstant)*fv; %Correct viscocisty force based on viscosity constant
        fa = 0; %additional if needed
        
        F_tot(i,:) = (fp + fv + [0 fg] + fa); %Sum of forces
    end
    % Time integration
    for i = 1:n
        a = F_tot(i,:)/density(i); %Calculate acceleration (F/m)
        %Use Modified Verlet method for simple integration
        velocity(i,:) = velocity(i,:) + a*dt;
        poss(i,:) = poss(i,:) + velocity(i,:)*dt + 0.5*a*dt^2;
        %end
        
        % Boundary Conditions (different for each scenerio)
        [ poss, velocity ] = boundary_bucket( poss, velocity, cr, i, dt );
    end
    
    % Movie terms
    currFrame = getframe;
    writeVideo(mov,currFrame);
    
    plot(poss(:,1),poss(:,2),'b.')
    xlim([0 4])
    ylim([-1.5 2.5])
    hold on
    plot(botx, boty, 'r');
    plot(leftx, lefty, 'r');
    plot(rightx, lefty, 'r'); %Plot bucket
    hold off
    xlim([0 4])
    ylim([-1.5 2.5])
end
close(mov)


Helper functions:
function [pm_new ] = update_mass(n, poss, pm, md0, h)
%This function adjusts the initial mass of the particles. 
%Inputs:
%n: number of particles
%poss: position array of particles
%pm: initial particle mass
%h: kernel size/smoothing length
%md0: "rest density" corresponding to 0 pressure force when fluid is at
%rest
%Outputs:
%pm_new: the updated particle mass
 
%This could be optimized more by using a nearest neighbor algorithm, but
%we couldn't get it working... :(
 
d = 0; %density summation variable
for i = 1:n
    for j = 1:n
        r = poss(i,:) - poss(j,:); %get position vector
        if((r*r') < h^2) %condition for computing density
            d = d + Equations(r,h,1); %compute density using kernel
        end
    end
end
ad = d/n; %mean density
pm_new = (ad*md0)/(ad*ad); %update particle mass based on rest density and calculated mean density
 
 
end
 




function [ density, pressure ] = update_pressure(n, poss, pm, md0,h,k )
%This function calculates the pressure for each particle through an SPH
%method
%Inputs:
%n: number of particles
%poss: position array of particles
%pm: initial particle mass
%md0: "rest density" corresponding to 0 pressure force when fluid is at
%rest
%h: kernel size/smoothing length
%k: Gas stiffness constant
%Outputs:
%ad: mean density over all interacting particles
%pm_new: the updated particle mass
 
for i = 1:n
    d = 0;
    for j = 1:n
        r = poss(i,:) - poss(j,:);
        if((r*r') < h^2)
            d = d + pm*Equations(r,h,1); %calculate the density for each particle
        end
    end
    density(i) = d; %save this value in an array for later use
    pressure(i) = k*(d-md0); %calculate the pressure force based on density and rest density
end
 
end
 

function [ Equation_ret ] = Equations(r,h,n)
%This function contains the equations needed to solve the Navier Stokes
%equations for a smooth particle hydrodynamics (SPH) simulation. 
 
%Inputs:
%r: 2 dimensional position vector
%h: characteristic width of the kernel
%n: Input determining which equation to return
 
Equation_ret = 0;
 
if(n == 1)
    %Kernel smoother used to approximate dirac delta function when
    %interpolating properties of "fluid" particles.
    Equation_ret = (315/(64*pi*h^9))*(h^2 -(r*r'))^3;
end
 
if(n == 2)
    %Gradient of the Kernel. Used to find the presure when solving navier
    %stokes.
    Equation_ret = -(45/(pi*h^6))*(r/(sqrt(r*r')))*(h-sqrt((r*r')))^2;
end
 
if(n == 3)
    %Laplacian of the Kernel. Used to find the viscocity when solving navier stokes. 
    Equation_ret = (45/(pi*h^6))*(h-(sqrt((r*r'))));  
end
 
end

function [ poss, velocity ] = boundary_block( poss, velocity, cr,i,dt)
%This function evaluates the boundary conditions for the flow past a block
%simulation. If the conditions are met, it adjusts the position and
%velocity to simulate a colission.
%Inputs:
%poss: position of the particles
%velocity: velocity of the particles
%cr: Scaling factor for strength of interactions
%i:current index to look at
%dt:time step size
%Outputs:
%poss: updated position of the particles
%velocity: updated velocity of the particles
 
if(poss(i,1) > 4)
        x = poss(i,:);
        cp = [4 poss(i,2)];
        d = sqrt(dot(cp-x,cp-x));
        normal = [-1 0]; %Direction of corrected velocity
       
        ui = velocity(i,:);
        poss(i,:) =cp +  d*normal; %Update velocity to simulate collision with wall
        velocity(i,:) =ui - (1 + cr*(d/(dt*sqrt(dot(ui,ui)))))*(ui*normal')*normal;
    end
    
    if(poss(i,1) < 0)
        x = poss(i,:);
        cp = [0 poss(i,2)];
        d = sqrt(dot(cp-x,cp-x));
        normal = [1 0];
       
        ui = velocity(i,:);
        poss(i,:) =cp + d*normal;
        velocity(i,:) =ui - (1 + cr*(d/(dt*sqrt(dot(ui,ui)))))*(ui*normal')*normal;
    end
    
    if abs(poss(i,1)-1.3) <= 0.05 && (abs(poss(i,2) -0.5) < 0.05) %flow around square boundary conditions
        x = poss(i,:);
        cp = [poss(i,1)+.01, poss(i,2)+.01];
        d = sqrt(dot(cp-x,cp-x));
        normal = [-1 0];
       
        ui = velocity(i,:);
        poss(i,:) =cp +  d*normal;
        velocity(i,:) =ui - (1 + cr*(d/(dt*sqrt(dot(ui,ui)))))*(ui*normal')*normal;
    end
 
 
end
 












function [ poss, velocity ] = boundary_bucket( poss, velocity, cr, i, dt )
%This function evaluates the boundary conditions for the flow into a bucket
%simulation. If the conditions are met, it adjusts the position and
%velocity to simulate a colission.
%Inputs:
%poss: position of the particles
%velocity: velocity of the particles
%cr: Scaling factor for strength of interactions
%i:current index to look at
%dt:time step size
%Outputs:
%poss: updated position of the particles
%velocity: updated velocity of the particles
 
if poss(i,2) <= -1 && poss(i,1)>=1.5 && poss(i,1) <= 2.5 %bucket edge cases
        x = poss(i,:);
        cp = [poss(i,1)+0.01 poss(i,2)+0.01];
        d = sqrt(dot(cp-x,cp-x));
        normal = [0 1];
       
        ui = velocity(i,:);
        poss(i,:) =cp + d*normal;
        velocity(i,:) =ui - (1 + cr*(d/(dt*sqrt(dot(ui,ui)))))*(ui*normal')*normal;
    end
    
    if poss(i,2) >= -1 && poss(i,2) <= 0 && abs(poss(i,1)-1.5) <=0.05
        x = poss(i,:);
        cp = [poss(i,1)+0.01 poss(i,2)+0.01];
        d = sqrt(dot(cp-x,cp-x));
        normal = [1 0];
       
        ui = velocity(i,:);
        poss(i,:) =cp +  d*normal;
        velocity(i,:) =ui - (1 + cr*(d/(dt*sqrt(dot(ui,ui)))))*(ui*normal')*normal;
    end
    
    if poss(i,2) >= -1 && poss(i,2) <= 0 && abs(poss(i,1)-2.55) <=0.1
        x = poss(i,:);
        cp = [poss(i,1)+0.01 poss(i,2)+0.01];
        d = sqrt(dot(cp-x,cp-x));
        normal = [-1 0];
       
        ui = velocity(i,:);
        poss(i,:) =cp +  d*normal;
        velocity(i,:) =ui - (1 + cr*(d/(dt*sqrt(dot(ui,ui)))))*(ui*normal')*normal;
    end
    
    if(poss(i,1) < 0)
        x = poss(i,:);
        cp = [0 poss(i,2)];
        d = sqrt(dot(cp-x,cp-x));
        normal = [1 0];
       
        ui = velocity(i,:);
        poss(i,:) =cp + d*normal;
        velocity(i,:) =ui - (1 + cr*(d/(dt*sqrt(dot(ui,ui)))))*(ui*normal')*normal;
    end
end
 


